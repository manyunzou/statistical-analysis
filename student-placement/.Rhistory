# don't show warning text
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
# Loading all the packages here
library(corrplot)
library(dplyr)
library(tidyr)
library(gmodels)
library(ggplot2)
library(reshape2)
library(psych)
library(class)
library(caret)
library(rpart) # decision trees
library(C50) # decision trees
library(kernlab) # svm
library(randomForest) # random forest
library(irr) # to calculate kappa
library(mlbench)
sheet_id <- "1mo7Q3c42sOJEC5y85NsBeRws4TquCJHS"
placement <- read.csv(sprintf("https://docs.google.com/uc?id=%s&export=download", sheet_id))
str(placement)
# drop the id column
drops <- c("sl_no")
placement <- placement[ , !(names(placement) %in% drops)]
# drop the salary column
# since it is not our target variable and is not suited for predictors either
drops2 <- c("salary")
placement <- placement[ , !(names(placement) %in% drops2)]
# read other columns
str(placement)
# exploring categorical features
table(placement$gender)
table(placement$ssc_b)
table(placement$hsc_b)
table(placement$hsc_s)
table(placement$degree_t)
table(placement$workex)
table(placement$specialisation)
table(placement$status)
# exploring numeric features
summary(placement[c("ssc_p","hsc_p","degree_p","etest_p", "mba_p")])
# Only keep the numerical features
categorical_features <- c("gender","ssc_b","hsc_b","hsc_s","degree_t","workex","specialisation","status")
placement_numeric <- placement[ , !(names(placement) %in% categorical_features)]
ggplot(data = melt(placement_numeric), aes(x=variable, y=value)) +  geom_point(aes(colour=variable))
# identify missing values
any(is.na(placement))
# (imagine if the dataset has already splited into test and train sets)
# impute missing data in training set
#placementTrain <- placementTrain %>%  mutate(across(where(is.numeric), ~replace_na(., median(., na.rm=TRUE))))
# impute missing data in test set
#placementTest <- placementTest %>%  mutate(across(where(is.numeric), ~replace_na(., median(., na.rm=TRUE))))
lapply(X=c("ssc_p", "hsc_p", "degree_p", "etest_p", "mba_p"),FUN=function(s)boxplot(placement[,s],main=paste("Box plot of",s),xlab=s))
# detect outliers using z-index
# z-index function
findOutliers <- function(x){
m <- mean(x)
sd <- sd(x)
z <- abs((x - m) / sd)
rows.outliers <- which(z > 2.5)
return (rows.outliers)
}
# find rows with outliers
sapply(placement_numeric[1:5], findOutliers)
#apply(student[5:16], findOutliers)
out_ind <- sapply(placement_numeric[1:5], findOutliers)
out_ind <- unique(unname(unlist(out_ind)))
# remove outliers from the original dataset
placement.no <- placement[-c(out_ind), ]
# first to encode the target variable
categorical_features <- c("gender","ssc_b","hsc_b","hsc_s","degree_t","workex","specialisation")
payment_numeric <- placement[ , !(names(placement) %in% categorical_features)] %>%
mutate(status = ifelse(status=="Placed", 1, 0))
#visualize a correlation matrix for numeric variables
M <- cor(payment_numeric)
corrplot(M, method="color")
# Null hypothesis: the variables are independent. If p <0.05, we must reject the null hypothesis.
# Chi-square test Reference: https://support.minitab.com/en-us/minitab/help-and-how-to/statistics/tables/how-to/cross-tabulation-and-chi-square/interpret-the-results/key-results/
# http://www.sthda.com/english/wiki/chi-square-test-of-independence-in-r#google_vignette
categorical_features <- c("gender","ssc_b","hsc_b","hsc_s","degree_t","workex","specialisation","status")
placement_categorical <- placement[ , (names(placement) %in% categorical_features)]
#head(placement_categorical)
# chi-squared test for gender
lapply(placement_categorical[,-1], function(x) chisq.test(placement_categorical[,1], x))
# chi-squared test for ssc_b
lapply(placement_categorical[,-2], function(x) chisq.test(placement_categorical[,2], x))
# chi-squared test for hsc_b
lapply(placement_categorical[,-3], function(x) chisq.test(placement_categorical[,3], x))
# chi-squared test for hsc_s
lapply(placement_categorical[,-4], function(x) chisq.test(placement_categorical[,4], x))
# chi-squared test for degree_t
lapply(placement_categorical[,-5], function(x) chisq.test(placement_categorical[,5], x))
# chi-squared test for workex
lapply(placement_categorical[,-6], function(x) chisq.test(placement_categorical[,6], x))
# chi-squared test for specialisation
lapply(placement_categorical[,-7], function(x) chisq.test(placement_categorical[,7], x))
# evaluation of distribution
lapply(X=c("ssc_p", "hsc_p", "degree_p", "etest_p", "mba_p"),FUN=function(s)hist(placement[,s],main=paste("Hist of",s),xlab=s))
# split into train and test sets
set.seed(111)
# set samples range
samples <- sample.int(n = nrow(placement), size = floor(.7*nrow(placement)), replace = F)
# for k-NN
# train set
placementTrain <- placement[samples, 1:12]
# validation test
placementTest <- placement[-samples, 1:12]
# save target variable separately
placementTrain.labels <- placement[samples, 13]
placementTest.labels <- placement[-samples, 13]
# for Decision Trees
placementTrain_tree <- placement[samples, ]
placementTest_tree <- placement[-samples, ]
set.seed(111)
# create Z-score Standardization
z_standardization <- function(data) {
standardized.df <- data.frame(matrix(ncol = ncol(data), nrow=nrow(data)))
names(standardized.df) <- names(data)
for (i in seq_along(data)){
column_data <- data[[i]]
mean_value <- mean(column_data, na.rm=TRUE)
sd_value <- sd(column_data, na.rm=TRUE)
standardized.df[[i]] <- (column_data - mean_value) / sd_value
}
return (standardized.df)
}
# normalize the numerical features in train set
placementTrain_numeric <- placementTrain[, !(colnames(placementTrain) %in% c("gender", "ssc_b","hsc_b", "hsc_s", "degree_t", "workex", "specialisation"))]
# create a new standardization dataset
placementTrain.standardized <- z_standardization(placementTrain_numeric)
#studentTrain.standardized <- as.data.frame(scale(studentTrain_numeric))
# add categorical features to the new dataset
placementTrain.standardized$gender <- placementTrain$gender
placementTrain.standardized$ssc_b <- placementTrain$ssc_b
placementTrain.standardized$hsc_b <- placementTrain$hsc_b
placementTrain.standardized$hsc_s <- placementTrain$hsc_s
placementTrain.standardized$degree_t <- placementTrain$degree_t
placementTrain.standardized$workex <- placementTrain$workex
placementTrain.standardized$specialisation <- placementTrain$specialisation
# normalize the numerical features in test set
placementTest_numeric <- placementTest[, !(colnames(placementTest) %in% c("gender", "ssc_b","hsc_b", "hsc_s", "degree_t", "workex", "specialisation"))]
placementTest.standardized <-  z_standardization(placementTest_numeric)
placementTest.standardized$gender <- placementTest$gender
placementTest.standardized$ssc_b <- placementTest$ssc_b
placementTest.standardized$hsc_b <- placementTest$hsc_b
placementTest.standardized$hsc_s <- placementTest$hsc_s
placementTest.standardized$degree_t <- placementTest$degree_t
placementTest.standardized$workex <- placementTest$workex
placementTest.standardized$specialisation <- placementTest$specialisation
# split into train and test sets
set.seed(111)
# set samples range
samples <- sample.int(n = nrow(placement), size = floor(.7*nrow(placement)), replace = F)
# for k-NN
# train set
placementTrain <- placement[samples, 1:12]
# validation test
placementTest <- placement[-samples, 1:12]
# save target variable separately
placementTrain.labels <- placement[samples, 13]
placementTest.labels <- placement[-samples, 13]
# for Decision Trees
placementTrain_tree <- placement[samples, ]
placementTest_tree <- placement[-samples, ]
set.seed(111)
# create Z-score Standardization
z_standardization <- function(data) {
standardized.df <- data.frame(matrix(ncol = ncol(data), nrow=nrow(data)))
names(standardized.df) <- names(data)
for (i in seq_along(data)){
column_data <- data[[i]]
mean_value <- mean(column_data, na.rm=TRUE)
sd_value <- sd(column_data, na.rm=TRUE)
standardized.df[[i]] <- (column_data - mean_value) / sd_value
}
return (standardized.df)
}
# normalize the numerical features in train set
placementTrain_numeric <- placementTrain[, !(colnames(placementTrain) %in% c("gender", "ssc_b","hsc_b", "hsc_s", "degree_t", "workex", "specialisation"))]
# create a new standardization dataset
placementTrain.standardized <- z_standardization(placementTrain_numeric)
#studentTrain.standardized <- as.data.frame(scale(studentTrain_numeric))
# add categorical features to the new dataset
placementTrain.standardized$gender <- placementTrain$gender
placementTrain.standardized$ssc_b <- placementTrain$ssc_b
placementTrain.standardized$hsc_b <- placementTrain$hsc_b
placementTrain.standardized$hsc_s <- placementTrain$hsc_s
placementTrain.standardized$degree_t <- placementTrain$degree_t
placementTrain.standardized$workex <- placementTrain$workex
placementTrain.standardized$specialisation <- placementTrain$specialisation
# normalize the numerical features in test set
placementTest_numeric <- placementTest[, !(colnames(placementTest) %in% c("gender", "ssc_b","hsc_b", "hsc_s", "degree_t", "workex", "specialisation"))]
placementTest.standardized <-  z_standardization(placementTest_numeric)
placementTest.standardized$gender <- placementTest$gender
placementTest.standardized$ssc_b <- placementTest$ssc_b
placementTest.standardized$hsc_b <- placementTest$hsc_b
placementTest.standardized$hsc_s <- placementTest$hsc_s
placementTest.standardized$degree_t <- placementTest$degree_t
placementTest.standardized$workex <- placementTest$workex
placementTest.standardized$specialisation <- placementTest$specialisation
# train set
# dummy coding for binary feature
placementTrain.standardized$gender <- ifelse(placementTrain.standardized$gender=="M", 1, 0)
placementTrain.standardized$ssc_b <- ifelse(placementTrain.standardized$ssc_b=="Central", 1, 0)
placementTrain.standardized$hsc_b <- ifelse(placementTrain.standardized$hsc_b=="Central", 1, 0)
placementTrain.standardized$workex <- ifelse(placementTrain.standardized$workex=="Yes", 1, 0)
placementTrain.standardized$specialisation <- ifelse(placementTrain.standardized$specialisation=="Mkt&Fin", 1, 0)
# one-hot coding for other categorical features
placementTrain.standardized_oneHot <- placementTrain.standardized %>%
model.matrix(~ hsc_s + degree_t, data = .) %>%
as.data.frame()
placementTrain.standardized <- cbind(placementTrain.standardized, placementTrain.standardized_oneHot[2:5])
drops <- c("hsc_s", "degree_t")
placementTrain.standardized <- placementTrain.standardized[ , !(names(placementTrain.standardized) %in% drops)]
# test set
placementTest.standardized$gender <- ifelse(placementTest.standardized$gender=="M", 1, 0)
placementTest.standardized$ssc_b <- ifelse(placementTest.standardized$ssc_b=="Central", 1, 0)
placementTest.standardized$hsc_b <- ifelse(placementTest.standardized$hsc_b=="Central", 1, 0)
placementTest.standardized$workex <- ifelse(placementTest.standardized$workex=="Yes", 1, 0)
placementTest.standardized$specialisation <- ifelse(placementTest.standardized$specialisation=="Mkt&Fin", 1, 0)
# one-hot coding for other categorical features
placementTest.standardized_oneHot <- placementTest.standardized %>%
model.matrix(~ hsc_s + degree_t, data = .) %>%
as.data.frame()
placementTest.standardized <- cbind(placementTest.standardized, placementTest.standardized_oneHot[2:5])
drops <- c("hsc_s", "degree_t")
placementTest.standardized <- placementTest.standardized[ , !(names(placementTest.standardized) %in% drops)]
# for SVM
# train data
placementTrain_svm <- placementTrain.standardized
placementTrain_svm$status <- as.factor(placementTrain.labels)
# test data
placementTest_svm <- placementTest.standardized
placementTest_svm$status <- as.factor(placementTest.labels)
set.seed(111)
student_knn_pred <- knn(train=placementTrain.standardized, test=placementTest.standardized, cl=placementTrain.labels, k=12)
confusionMatrix(factor(student_knn_pred, levels=c("Placed","Not Placed")), factor(placementTest.labels, levels=c("Placed", "Not Placed")), positive="Placed")
# ROC curve
# consider put three curves together
student_knn_pred_num <- ifelse(student_knn_pred=="Placed", 1, 0)
placementTest.labels_num <- ifelse(placementTest.labels=="Placed", 1, 0)
knn_roc <- roc(student_knn_pred_num, placementTest.labels_num)
# ROC curve
# consider put three curves together
library(pROC)
student_knn_pred_num <- ifelse(student_knn_pred=="Placed", 1, 0)
placementTest.labels_num <- ifelse(placementTest.labels=="Placed", 1, 0)
knn_roc <- roc(student_knn_pred_num, placementTest.labels_num)
plot(knn_roc, main="ROC curve for kNN classifier", col="blue", lwd=2, grid=TRUE, legacy.axes=TRUE)
